---
- name: Playbook to configure ansible controller post installation
  hosts: all
  vars_files:
    - "../vaults/{{ env }}.yml"
  connection: local
  tasks:
    - name: include setting role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.settings
      when: controller_settings | length is not match('0')

    - name: include organization role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.organizations
      vars:
        assign_galaxy_credentials_to_org: false
      when: controller_organizations | length is not match('0')

    - name: include labels role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.labels
      when: controller_labels | length is not match('0')

    - name: include users role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.users
      vars:
        controller_configuration_users_secure_logging: true
      when: controller_user_accounts | length is not match('0')

    - name: include teams role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.teams
      when: controller_teams | length is not match('0')

   # probably not optimal but works, looking for better solutions
    - name: Figuring out AH token
      block:
        - name: Authenticate and get an API token from Automation Hub
          redhat_cop.ah_configuration.ah_token:
            ah_host: "{{ ah_host | default(groups['automationhub'][0]) }}"
            ah_username: "{{ ah_token_username | default('admin') }}"
            ah_password: "{{ ah_token_password }}"
            ah_path_prefix: 'galaxy' # this is for private automation hub
            validate_certs: false
          register: r_ah_token

        - name: Fixing format
          ansible.builtin.set_fact:
            ah_token: "{{ ah_token['token'] }}"
          when: r_ah_token['changed']
       # what needs to be done to guarantee this to work?
#      rescue:
      when: ah_token is not defined or ah_token['token'] is defined

    - name: update credentials
      block:
        - name: include credential_types role
          ansible.builtin.include_role:
            name: redhat_cop.controller_configuration.credential_types
          when: controller_credential_types | length is not match('0')

      rescue:
        - name: pulling credential_types list
          ansible.builtin.set_fact:
            cf_current_credential_types: "{{ cf_current_credential_types | default([]) + [{ 'name' : item.name, 'state' : 'absent'}] }}"
          loop: "{{ _current_cred_types }}"
          vars:
            _current_cred_types: "{{ lookup('awx.awx.tower_api', 'credential_types', query_params={ 'managed': false } ,host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=controller_validate_certs) }}"
#            _current_cred_types: "{{ lookup('ansible.controller.controller_api', 'credential_types', query_params={ 'namespace__isnull': true } ,host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=controller_validate_certs) }}"

        - name: pulling credentials list
          ansible.builtin.set_fact:
            cf_current_credentials: "{{ cf_current_credentials | default([]) + [{ 'name' : item.name, 'credential_type' : item.credential_type, 'state' : 'absent'}] }}"
          loop: "{{ _current_credentials }}"
          vars:
            _current_credentials: "{{ lookup('awx.awx.tower_api', 'credentials', query_params={ 'managed': false }, host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=controller_validate_certs) }}"
#            _current_cred_types: "{{ lookup('ansible.controller.controller_api', 'credentials', host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=controller_validate_certs) }}"

        - name: include credentials role
          ansible.builtin.include_role:
            name: redhat_cop.controller_configuration.credentials
          vars:
            controller_credentials: "{{ cf_current_credentials }}"
            controller_configuration_credentials_secure_logging: false

        - name: include credential_types role
          ansible.builtin.include_role:
            name: redhat_cop.controller_configuration.credential_types
          vars:
            controller_credential_types: "{{ cf_current_credential_types }}"

        - name: include credential_types role
          ansible.builtin.include_role:
            name: redhat_cop.controller_configuration.credential_types

    - name: include credential role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.credentials
      vars:
        controller_configuration_credentials_secure_logging: true
      when: controller_credentials | length is not match('0')

    - name: include credential_input_sources role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.credential_input_sources
      when: controller_credential_input_sources | length is not match('0')

    - name: include execution_environments role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.execution_environments
      when: controller_execution_environments | length is not match('0')

    - name: include organizations role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.organizations
      when: controller_organizations | length is not match('0')

    - name: include projects role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.projects
      when: controller_projects | length is not match('0')

    - name: include inventories role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.inventories
      when: controller_inventories | length is not match('0')

    - name: include inventory_sources role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.inventory_sources
      when: controller_inventory_sources | length is not match('0')

    - name: include inventory_source_update role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.inventory_source_update

    - name: include groups role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.groups
      when: controller_groups | length is not match('0')

    - name: include applications role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.applications
      when: controller_applications | length is not match('0')

    - name: include job_templates role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.job_templates
      when: controller_templates | length is not match('0')

    - name: include workflow_job_templates role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.workflow_job_templates
      when: controller_workflows | length is not match('0')

    - name: include schedules role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.schedules
      when: controller_schedules | length is not match('0')

    - name: include roles role
      ansible.builtin.include_role:
        name: redhat_cop.controller_configuration.roles
      when: controller_roles | length is not match('0')
...
